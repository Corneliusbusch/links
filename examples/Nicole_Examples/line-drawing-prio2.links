typename Canvas = ();
alien javascript "/js/canvas.js" {
    drawUnit: (Int, Int, String, Canvas) ~> ();
    drawCustomUnit: (Int, Int, Int, Int, String, Canvas) ~> ();
    getColorFromSelection: (String) ~> String;
}

alien javascript "js/runtime.js" {
    systemYield : ((()) {}~> ()) ~> ();
    delayExecution: (Int) ~> ();
    sysEnqueue: (a) ~> ();
    sysDequeue: () ~> [a];
    sysQueueLength: () -> Int;
}

fun system(f){
    handle(f()){
        case Yield(resume) -> systemYield(resume)
    }
}

typename Point = (x:Int, y:Int);
typename Queue(a) = (rear: [a], front: [a]);
typename Option(a) = [|Some:a|None|];
typename PrioQueue(a) = (high: Queue(a), low: Queue(a));
typename Priority = [|High|Low|];
typename Co(e::Eff) = () {Fork: (Co({ |e}), Priority) -> (), Yield |e}~> ();
typename Time = Int;
typename Fiber0(e::Eff) = (prio: Priority, f: () {Fork: (Fiber0({ |e})) -> (), Yield |e}~> ());
typename SchedulerState(a) = (runQ: PrioQueue(a), prio: Priority, startTime: Time);
typename Fiber(e::Eff) = (prio:Priority, f: (SchedulerState(Fiber({ |e}))) ~e~> ());
typename FiberQueue(e::Eff) = PrioQueue(Fiber({ |e}));



var colors = ["green", "red", "blue", "yellow"];

#Threading 

sig enqueue: (a, Queue(a)) -> Queue(a)
fun enqueue(x, q){
    (q with rear=x::q.rear)
}

sig dequeue: (Queue(a)) ~> (Option(a), Queue(a))
fun dequeue(q){
    switch(q) {
        case (rear=[], front=[]) -> (None, q)
        case (rear=xs, front=[]) ->
          var q0 = (rear=[], front=reverse(xs));
          dequeue(q0)
        case (rear=ys, front=(x :: xs)) ->
          var q0 = (rear=ys, front=xs);
          (Some(x), q0)
    }
}

#priorityEnqueue : ( (priority:Priority |r), PriorityQueue({ priority:Priority |r}) ) -> PriorityQueue({ priority:Priority |r})
sig priorityEnqueue: (a, Priority, PrioQueue(a)) ~> PrioQueue(a)
fun priorityEnqueue(x, prio, pq){
    switch(prio){
        case High -> (pq with high = enqueue(x, pq.high))
        case Low -> (pq with low = enqueue(x, pq.low))
    }
}

sig priorityDequeue: (PrioQueue(a)) ~> (Option((a, Priority)), PrioQueue(a) )
fun priorityDequeue(pq){
    switch(dequeue(pq.high)){
        case (Some(x), q) -> (Some((x, High)), (pq with high= q))
        case (None,_) -> 
            switch(dequeue(pq.low)){
                case (None, _) -> (None, pq)
                case (Some(x), q) -> (Some((x, Low)), (pq with low=q))
            }
    }
}

sig fiberEnqueue: (Fiber({ |e}), PrioQueue(Fiber({ |e}))) ~> PrioQueue(Fiber({ |e}))
fun fiberEnqueue(f, q){
    priorityEnqueue(f, f.prio, q)
}

sig fiberBulkEnqueue: ([Fiber({ |e})], PrioQueue(Fiber({ |e}))) ~> PrioQueue(Fiber({ |e}))
fun fiberBulkEnqueue(fibers, q){
    switch(fibers){
        case [] -> q
        case x::xs -> 
            var pq = fiberEnqueue(x, q); 
            fiberBulkEnqueue(xs, pq)
    }
}

sig fiberDequeue: (PrioQueue(Fiber({ |e}))) ~> (Option((Fiber({ |e}), Priority)), PrioQueue(Fiber({ |e})))
fun fiberDequeue(q){
    priorityDequeue(q)
}

fun emptyQueue(){
    (rear=[], front=[])
}

fun emptyPrioQueue(){
    (high= emptyQueue(), low=emptyQueue())
}


sig queueLength: (Queue(a)) -> Int
fun queueLength(q){
    length(q.rear) + length(q.front)
}

sig fiberQueueLength: (FiberQueue({ |e}))  -> Int
fun fiberQueueLength(q){
    length(q.low.rear) + length(q.high.front) + length(q.high.rear) + length(q.low.front)
}

sig fork : (Fiber0({ |e})) {Fork: (Fiber0({ |e})) -> (), Yield |e}~> ()
fun fork(f){
    do Fork(f)
}

sig yield: () {Yield |e}~> ()
fun yield(){
    do Yield
}

typename Resumption(e::Eff) = ((), PrioQueue(Resumption({ |e})), Priority, Time) {Fork-, Yield- |e}~> ();

sig makeFiber: (Priority, () {Fork: (Fiber0({ |e})) -> (), Yield |e}~> ()) -> Fiber0({ |e})
fun makeFiber(prio, f){
    (prio= prio, f=f)
}

sig schedule: (Fiber0({ |e})) {Yield-, Fork- |e}~> ()
fun schedule(main){

    #sig runNext : (PrioQueue(Resumption({ |e}))) { |%e}~> ()
    fun runNext(q){
        switch(fiberDequeue(q)){
            case (None, _) -> ()
            case (Some((fiber, prio)), q) -> fiber.f(makeSchedulerState(prio, q))
        }
    }

    fun runFiber(fiber, runQ){
        handle(fiber.f()) ( (prio=fiber.prio, runQ=runQ, startTime=clientTime()) -> state){
            case Return(x) -> 
                runNext(state.runQ)
            case Fork(f, resume) -> 
                switch ((f.prio, state.prio)) {
                    case (High, _) ->
                        var q = fiberEnqueue(resumptionToFiber(resume, state.prio), state.runQ);
                        runFiber(f, q)
                    case (_, High) ->
                        var q = fiberEnqueue(fiber0ToFiber(f), state.runQ);
                        resume((), (state with runQ = q))
                    case (_,_) ->
                        var q = fiberEnqueue(resumptionToFiber(resume, state.prio), state.runQ);
                        runFiber(f, q)
                }
            case Yield(resume) -> 
                #println("sys: " ^^ intToString(sysQueueLength()) ^^ " runQ: " ^^ intToString(fiberQueueLength(runQ)));
                var currentTime = clientTime();
                var buffer = switch(state.prio){
                    case High -> 2000
                    case Low -> 300 
                };
                if (currentTime - state.startTime <= buffer) resume((), state)
                else{
                    var q = fiberEnqueue(resumptionToFiber(resume, state.prio), state.runQ); 
                    var enqueue = map(fiber0ToFiber, sysDequeue());
                    #var enqueue = [fiber0ToFiber(makeFiber(High, printHello))];
                    var qq = fiberBulkEnqueue(enqueue, q);
                    runNext(qq)
                }
                
        }
    }

    sig makeSchedulerState: (Priority, PrioQueue(a)) ~> SchedulerState(a)
    fun makeSchedulerState(prio, q){
        (runQ = q, prio = prio, startTime = clientTime())
    }

    fun fiber0ToFiber(fiber : Fiber0({ |e})){
        (prio = fiber.prio, f = fun(state) { runFiber(fiber, state.runQ ) })
    }

    fun resumptionToFiber(resume, prio){
        (prio = prio, f = fun(state) { resume((), state) })
    }

    runFiber(main, emptyPrioQueue())

}


# Page Functionality

sig difference: (Point, Point) -> Point
fun difference(a, b){
    (x = a.x - b.x, y= a.y - b.y)
}

sig absolute: (Int) -> Int
fun absolute(n){
    if(n < 0){
        n * -1
    } else{
        n
    }
}

sig parseInt: (String) ~> Option(Int)
fun parseInt(n){ 
    if (n =~ /^[0-9]+$/) {
        Some(stringToInt(n))
    } else{
        None
    }
}

sig setValue: (a, String, (a) ~> String) ~%~> ()
fun setValue(newVal, id, toString){
    ignore(domSetAttributeFromRef(getNodeById(id), "value", toString(newVal)))
}

fun getValue(id){
    domGetAttributeFromRef(getNodeById(id), "value")
}

fun updatePoints(startx, starty, endx, endy){
    setValue(startx, "start-x", intToString);
    setValue(starty, "start-y", intToString);
    setValue(endx, "end-x", intToString);
    setValue(endy, "end-y", intToString);
}

sig getPoints: () ~> Option((Point, Point))
fun getPoints(){
    var startx = parseInt(getValue("start-x")); 
    var starty = parseInt(getValue("start-y"));
    var endx = parseInt(getValue("end-x"));
    var endy = parseInt(getValue("end-y"));
    switch((startx, starty, endx, endy)){
        case (Some(sx), Some(sy), Some(ex), Some(ey)) -> Some((x = sx, y = sy), (x = ex, y = ey))
        case (_, _, _, _) -> None
    }
}

sig drawLine: (Point, Point, String) ~> ()
fun drawLine(start, end, color){
    var div = getNodeById("box");
    var context = jsGetContext2D(div);
    jsBeginPath(context);
    jsMoveTo(context, intToFloat(start.x), intToFloat(start.y));
    jsLineWidth(context, 8.0);
    jsLineTo(context, intToFloat(end.x), intToFloat(end.y));
    jsStrokeStyle(context, color);
    jsStroke(context)
}

sig drawHorizontalLine: (Point, Point, String) {Yield |e}~> ()
fun drawHorizontalLine(start, end, color){
    var div = getNodeById("box");
    var context = jsGetContext2D(div);
    var diff = difference(end, start);
    fun aux(n, start){
        #println("draw "^^ color);
        #drawUnit(start.x, start.y, color, context);
        drawCustomUnit(start.x, start.y, 1, 25, color, context);
        yield();
        delayExecution(50);
        if (n > 0) aux(n -1, (x = start.x + (diff.x / absolute(diff.x)), y = start.y))
        else ()
    }
    aux(absolute(diff.x), start);
}

sig drawVerticalLine: (Point, Point, String) {Yield |e}~> ()
fun drawVerticalLine(start, end, color){
    var div = getNodeById("box");
    var context = jsGetContext2D(div);
    var diff = difference(end, start);
    fun aux(n, start){
        #println("draw "^^ color);
        #drawUnit(start.x, start.y, color, context);
        drawCustomUnit(start.x, start.y, 5, 1, color, context);
        yield();
        delayExecution(100);
        if (n > 0) aux(n -1, (x = start.x, y = start.y + (diff.y / absolute(diff.y))))
        else ()
    }
    aux(absolute(diff.y), start);
}

sig drawLineByPart: (Int, Point, Point, String) {Yield |e}~> ()
fun drawLineByPart(n, start, end, color){
    var diff = difference(end, start);
    var step = (x = diff.x / n, y= diff.y / n);
    fun aux(n, start, end){
        #println("draw " ^^ color);
        drawLine(start, (x = start.x + step.x, y = start.y + step.y), color);
        yield();
        if (n > 1) aux(n - 1, (x = start.x + step.x, y = start.y + step.y), end)
        else ()
    }
    aux(n, start, end)
}

sig drawBlue: () {Yield |e}~> ()
fun drawBlue(){
    println("start drawing blue, yield.");
    yield();
    drawHorizontalLine((x=10, y=10), (x=390, y=10), "blue");
    #drawLineByPart(2000, (x=10, y=10), (x=10, y=390), "blue");
    #drawLine((x=10, y=10), (x=10, y=390), "blue");
    yield();
    println("finish drawing blue.")
}

sig drawRed: () {Yield |e}~> ()
fun drawRed(){
    println("start drawing red, yield.");
    yield();
    drawHorizontalLine((x=10, y=60), (x=390, y=60), "red");
    #drawLineByPart(2000, (x=10, y=10), (x=390, y=10), "red");
    #drawLine((x=10, y=10), (x=350, y=10), "red");
    yield();
    println("finish drawing red.")
}

sig drawGreen: () {Yield |e}~> ()
fun drawGreen(){
    println("start drawing green, yield.");
    yield();
    drawHorizontalLine((x=10, y=110), (x=390, y=110), "green");
    #drawLineByPart(2000, (x=390, y=10), (x=390, y=390), "green");
    yield();
    println("finish drawing green.")
}

sig drawYellow: () {Yield |e}~> ()
fun drawYellow(){
    println("start drawing yellow, yield.");
    yield();
    drawHorizontalLine((x=10, y=160), (x=390, y=160), "#ffcc00");
    #drawLineByPart(2000, (x=10, y=390), (x=390, y=390), "#ffcc00");
    yield();
    println("finish drawing yellow.")
}

sig drawColor: (Point, Point, String) {Yield |e}~> ()
fun drawColor(start, end, color){
    println("start drawing " ^^ color ^^ ", yield.");
    yield();
    drawHorizontalLine((x=start.x, y=start.y), (x=end.x, y=end.y), color);
    yield();
    println("finish drawing " ^^ color)
}

sig triggerLine: (String) {Fork:(Fiber0 ({ |a })) {}-> (),Yield |a}~> ()
fun triggerLine(color){
    switch(color){
        #case "blue" -> fork(makeFiber(High, prepareDrawing((x = 10, y = 10), (x = 10, y = 390), "blue")))
        case "red" -> fork(makeFiber(High, drawRed))
        case "green" -> fork(makeFiber(Low, drawGreen))
        case "yellow" -> fork(makeFiber(Low, drawYellow))
        case _ -> () #fork(makeFiber(High, drawBlue))
    }
}

sig printHello: () {Yield |e}~> ()
fun printHello(){
    fun aux(n){
        if(n<= 0) ()
        else {
            println("Hello"); 
            addStringToNode("Hello", "hello"); 
            delayExecution(300);
            yield(); 
            aux(n-1)
        }
    }
    aux(10)
}

fun addStringToNode(string, id){
    var node = getNodeById(id);
    appendChildren(<#><p style="text-align: center;"> {stringToXml(string)} </p></#>, node)
}

fun start(){
    fun aux(colors){
        switch(colors){
            case [] -> ()
            case x::xs -> triggerLine(x); aux(xs)
        }
    }
    aux(colors)
}

sig prepareDrawing: (Point, Point, String) ~> () {Yield |e}~> ()
fun prepareDrawing(start, end, color){
    fun(){
        drawColor(start, end, color)
    }
}

fun buttonPressed(){
    println("Button Pressed");
    var points = getPoints();
    switch(points){
        case None -> ()
        case Some((start, end)) -> {
            updatePoints(start.x, start.y + 40, end.x , end.y + 40);
            var color = getColorFromSelection("line-color");
            sysEnqueue(makeFiber(High, prepareDrawing(start, end, color)))
        }
    }
}



# Web interface

sig main_page : (_) ~> Page
fun main_page(_){

    var pId = spawnClient{schedule(makeFiber(High, start))};
    

    page
    <html>
    <head>
        <style>
        .center{{
            margin: 0 auto;
        }}
        .block{{
            display: block;
        }}
        .box{{
            width: 400px;
            height: 400px;
            border: solid 1px #aaa;
        }}
        .buttons{{
            display:flex;
            justify-content: center;
            width: 80%;
        }}
        .button{{
            width: 19%;
            min-width: 90px;
            height: 2.6em;
        }}
        .margin-all-4{{
            margin:4px;
        }}
        .margin-10{{
            margin-top: 10px;
            margin-bottom: 10px;
        }}
        .red{{
            background-color: red;
            color: white;
        }}
        .blue{{
            background-color: blue;
            color: white;
        }}
        .green{{
            background-color: green;
            color: white;
        }}
        .yellow{{
            background-color: yellow;
            color: black;
        }}
        </style>
    </head>
    <body>
        <canvas id="box" width="400" height="400" class="box center block"></canvas>
        <div class="selection margin-10 center">
        <select id="line-color">
            <option value="#C25B56">Red</option>
            <option value="#4F772D">Green</option>
            <option value="#314570">Blue</option>
            <option value="#FDB632">Yellow</option>
            <option value="#801638">Berry </option>
            <option value="#027878">Teal</option>
        </select>
            <button class="block button center" l:onclick="{schedule(makeFiber(High, buttonPressed))}">Draw Line</button>
        </div>
        <div id="hello"></div>
        <div id="data" display="none">
            <div id="start-x" value="10"></div>
            <div id="start-y" value="160"></div>
            <div id="end-x" value="390"></div>
            <div id="end-y" value="160"></div>
        </div>

    </body>
    </html>
}

sig main: () ~> ()
fun main() {
    addRoute("/", main_page);
    addStaticRoute("/js", "js", [("js", "text/javascript")]);
    
    servePages()
}

main()