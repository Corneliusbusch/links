#tictactoe console edition

typename Player = [|X|O|];
typename Option(a) = [|None|Some:a|];

var initialState = [None, None, None, None, None, None, None, None, None]: [Option(Player)];

fun addMove(player, index, state){
    print("Set Move");
    mapi(fun(field, i){
        if(i==index){
            Some(player)
        } else{
            field
        }
    }, state)
}

fun x(gameState){
    var index = recv();
    switch(gameState !! index){
        case None -> {
            print("Setting X.");
            var newGameState = addMove(X, index, gameState);
            printState(newGameState);
            if (checkIfWon(X, newGameState))
                print("X won")
            else
                o(newGameState)
            
        }
        case Some(player) -> {
           print("Already full") 
        }
    }
}

fun o(gameState){
    var index = recv();
    switch(gameState !! index){
        case None -> {
            print("Setting O.");
            var newGameState = addMove(O, index, gameState);
            printState(newGameState);
            if (checkIfWon(O, newGameState))
                print("O won")
            else
                x(newGameState)
                    
        }
        case Some(player) -> {
           print("Already full") 
        }
    }
}

fun checkIfWon(player : Player, gameState){

    # very stupid. Couldn't understand how to loop through by rows and columns
    var zero = gameState !! 0;
    var one = gameState !! 1;
    var two = gameState !! 2; 
    var three = gameState !! 3;
    var four = gameState !! 4;
    var five = gameState !! 5;
    var six = gameState !! 6;
    var seven = gameState !! 7;
    var eight = gameState !! 8;
    (zero == one) && (one == two) && (two == Some(player)) ||
    (three == four) && (four == five) && (five == Some(player)) ||
    (six == seven) && (seven == eight) && (eight == Some(player)) ||
    (zero == three) && (three == six) && (six == Some(player)) ||
    (one == four) && (four == seven) && (seven == Some(player)) ||
    (two == five) && (five == eight) && (eight == Some(player)) ||
    (zero == four) && (four == eight) && (eight == Some(player))||
    (two == four) && (four == six) && (six == Some(player))

}

fun figureToInt(fgr) {
    switch(fgr){
        case X -> 0
        case O -> 1
    }
}

fun playerToString(player) {
    switch(player){
        case X -> "X"
        case O -> "O"
    }
}

fun optionToString(xToString)(option){
    switch(option){
        case None -> "_"
        case Some(player) -> xToString(player)
    }
}

fun listToString(list, xToString){
   "[" ^^ stringCat(intersperse(", ", map(xToString, list))) ^^ "]"
}

fun printState(state){
    print(listToString(state, optionToString(playerToString)))
}


fun intersperse(y, xs){
    switch(xs){
        case [] -> []
        case [x] -> [x]
        case x::xs -> x::y::intersperse(y, xs)
    }
}

fun stringCat(xs){
    switch(xs){
        case [] -> ""
        case x::xs -> x ^^ stringCat(xs)
    }
}

fun playGame(moveList){
    var gameId = spawnAngel{x(initialState)};
    fun nextMove(moveList){
        switch(moveList){
            case [] -> ()
            case move::moveList -> {
                gameId ! move;
                nextMove(moveList)
            }
        }
    }
    nextMove(moveList)
}