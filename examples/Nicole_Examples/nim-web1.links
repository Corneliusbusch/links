#Nim web example

typename Player = [|Alice|Bob|You|];
typename Level = [|Easy|Medium|Hard|];
typename Cmd = [|SetPlayer: (Player, Player)| SetLevel: Level| SetChecker: Bool| StartGame: Int| YourMove: Int|];
typename GameState = (players:(Player, Player), level: Level, cheat:Bool);
typename ViewState = [|Game|SetUp|];

sig playerToString: (Player) -> String
fun playerToString(pl){
    switch(pl){
        case Bob -> "Bob"
        case Alice -> "Alice"
        case You -> "You"
    }
}

sig move: (Player, Int) {Move:(Player, Int) -> Int|e}~> Int
fun move(pl, n){
    do Move(pl, n)
}

sig game: (Int) -%-> %
fun game(n){
    #ranStr(aliceTurn,n)
    var st = do Get;
    turn(st.players.1, st.players.2, n)
}

sig turn: (Player, Player, Int) {Move: (Player, Int) -> Int|e}~> Player
fun turn(current, opp, n){
    if(n<= 0){
        print(playerToString(current) ^^ " Won!");
        #showWinnerView
        current
    } else{
        var rest = move(current, n);
        updateView(n, rest, current);
        print(playerToString(current)^^" takes "^^ intToString(n-rest) ^^ ".");
        turn(opp, current, rest)
    }
}


#fun yourTurn(opp, n){
#
#    var input = switch(recv()){
#        case YourMove(x) -> x
#        case _ -> error("Bad Input")
#    };
#    var rest = n - input;
#    turn(opp, You, rest)
#}

sig gameProcess : () {Get:GameState, Set:(GameState) -> (), Move:(Player, Int) -> Int, hear:Cmd |e}~> a
fun gameProcess(){
    var cmd = recv();
    var ret = switch(cmd){
        case SetPlayer(pl1, pl2) -> setPlayer(pl1, pl2)
        case SetLevel(lev) -> setLevel(lev)
        case SetChecker(check) -> setChecker(check)
        case YourMove(_) -> error("Unexpected input")
        case StartGame(n) -> ignore(game(n))
    };
    gameProcess()
}

#handler

sig runState : (() {Get:s, Set:(s) -> () |e}~> a, s) {Get-, Set- |e}~> (a, s)
fun runState(f, st0){
    handle(f())(st0 -> st){
        case Return(x) -> (x, st)
        case Set(st1, resume) -> resume((), st1)
        case Get(resume) -> resume(st, st)
    }
}

# () for the suspended computation -> moveHandler returns a value so we need to thunk it. same as
# var pId = spawnClient{runState(fun(){moveHandler(gameProcess)}, (players=(Alice,Bob), level=Easy, cheat=false))};
sig moveHandler: (() {Move: (Player, Int) -> Int, hear:Cmd|e}~> a) -> () {Move-, hear:Cmd|e}~> a
fun moveHandler(f)(){
    handle(f()){
        case Return(x) -> x
        case Move(pl, n, resume) -> {
            switch (pl) {
                case You ->
                    var rest = switch(recv()){
                        case YourMove(x) -> n-x
                        case _ -> error("Wrong Input")
                    };
                    resume(rest)
                case _ -> resume(n-1)
            }
        }
    }
}

sig setPlayer : (Player, Player) {Get:GameState, Set: (GameState) -> () |e}~> ()
fun setPlayer(pl1, pl2){
    var st = do Get;
    do Set((st with players=(pl1, pl2)))
}

sig setLevel : (Level) {Get:GameState, Set: (GameState) -> () |e}~> ()
fun setLevel(lev){
    var st = do Get;
    do Set((st with level=lev))
}

sig setChecker : (Bool) {Get:GameState, Set: (GameState) -> () |e}~> ()
fun setChecker(check){
    var st = do Get;
    do Set((st with cheat=check))
}

fun parseNat(n){
    print(n);
    if (n =~ /^[0-9]+$/) {
        var m = stringToInt(n);
        if(m < 0){
            None
        } else{
            Some(m)
        }
    } else{
        None
    }
}

fun sendInput(pId){
    var n = getInputValue("your-move");
    switch(parseNat(n)){
        case None -> error("Wrong Input")
        case Some(m) -> pId ! YourMove(m)
    }
}

fun validInput(id){
    var num = parseNat(getInputValue(id));
    switch(num){
        case None -> false
        case Some(n) -> true
    }
}

fun start(pId){
    var num = parseNat(getInputValue("start-number"));
    switch(num){
        case None -> domReplaceChildren(stringToXml("Please only enter numbers into the field."), getNodeById("start-error-message"));
        case Some(n) -> {
            renderView(Game, pId, n);
            pId ! StartGame(n)
        }
    }
}

fun restart(pId){
    pId ! SetPlayer(Alice, Bob);
    pId ! SetLevel(Easy);
    pId ! SetChecker(false);
    renderView(SetUp, pId, 0)
}

fun renderView(view, pId, n){
    var strategyNode = getNodeById("choose-strategy");
    var gameNode = getNodeById("game");
    switch(view){
        case Game -> domReplaceChildren(getGameXml(pId, n), gameNode); domReplaceChildren(<#></#>, strategyNode)
        case SetUp -> domReplaceChildren(getSetUpXml(pId), strategyNode); domReplaceChildren(<#></#>, gameNode)
    }
}

fun updateView(n, rest, current){
    #update sticks on the stack
    domReplaceChildren(intToXml(rest), getNodeById("left-sticks"));
    
    #update game steps
    var step= switch(current){
        case You -> {<#><div> 
            <p> {stringToXml("You take "^^ intToString(n-rest)^^".")}</p>
            </div></#>}
        case _ -> {<#><div> 
            <p> {stringToXml(playerToString(current) ^^" takes "^^ intToString(n-rest)^^".")}</p>
            </div></#>}
    };
    appendChildren(step, getNodeById("game-steps"))
}

fun getGameXml(pId, n){
            <#>
            <div class="field rounded-corners width-list center margin-10 ">
                <div id="left-sticks">intToXml(n)</div>
                <div id="game-steps"></div>

                <input class="input-field" placeholder="Enter your move" id="your-move" type="text" />
                <button class="move-button rounded-corners margin-10 color-sec" l:onclick="{sendInput(pId)}">Move</button>
            </div>
            <p class="error-message" id="start-error-message"></p>
            <button class="rounded-corners block row-button center color-accent" l:onclick="{restart(pId)}"> Restart </button>
        </#>
}

fun getSetUpXml(pId){
            <#>
            <div class="field rounded-corners width-list center  margin-10">
                <p> Choose your Opponent: </p>
                <div class="buttons center">
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetPlayer(You, Alice)}">Alice</button>
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetPlayer(You, Bob)}">Bob</button>
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetPlayer(Alice, Bob)}">Or Alice vs Bob</button>
                </div>
            </div>
            <div class="field rounded-corners width-list center margin-10">
                <p> Choose your Difficulty: </p>
                <div class="buttons center">
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetLevel(Easy)}">Easy</button>
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetLevel(Medium)}">Medium</button>
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetLevel(Hard)}">Hard</button>
                </div>
            </div>
            <div class="field rounded-corner width-list center margin-10">
                <p> Allow Cheating:</p>
                <div class="buttons center">
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetChecker(false)}">No</button>
                    <button class="row-button rounded-corners margin-10 color-sec" l:onclick="{pId ! SetChecker(true)}">Yes</button>
                </div>
            </div>
            <div class="field rounded-corners width-list center margin-10">
                <p>Please choose a start number:</p>
                <input class="input-field rounded-corners" id="start-number" type="text" />
            </div>
                            
            <p class="error-message" id="start-error-message"></p>

            <button class="rounded-corners block row-button center color-accent" l:onclick="{start(pId)}"> Start Game </button>
            
            
        </#>
}



sig main_page : (_) ~> Page
fun main_page(_) {
    var pId = spawnClient{runState(moveHandler(gameProcess), (players=(Alice,Bob), level=Easy, cheat=false))};



    page
    <html>
    <head>
        <style>
        body{{
            font-size: 20px;
            font-family: Bookman, sans-serif;
            color: #3e0068;
        }}
        .background{{
            width: 80%;
            max-width: 1200px;
            min-width: 300px;
            background-color: #f4f4f4;
            min-height: 100%;
        }}
        .top-heading{{
            padding-top: 1em;
            width: 75%;
            font-size: 3em;
            line-height: 0;
            color: #c4005e;
            font-weight: bold;
            text-align: center;
        }}
        .centered-text{{
            text-align: center;
        }}
        .center{{
            margin: 0 auto;
        }}
        .font-size-large{{
            font-size: 1.5em;
        }}
        .text-align-right{{
            text-align: right;
        }}
        .center-vertical{{
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
        }}
        .width-list{{
            width: 90%;
        }}
        .margin-10{{
            margin-top:10px;
            margin-bottom: 10px;
        }}
        .font-10{{
            font-size: 15px;
        }}
        .block{{
            display: block;
        }}
        .buttons{{
            display:flex;
            justify-content: center;
        }}
        .button{{
            height: 30px;
            width: 55px;
        }}
        .row-button{{
            width: 19%;
            min-width: 90px;
            height: 2.6em;
            margin: 4px;
        }}
        .row-button:visited .row-button:focus{{
            background-color: #63b29e;
        }}
        .move-button{{
            width: 10%;
            height: 1.5em;
        }}
        .move-button:hover .row-button:hover{{
            background-color:#63b29e;
        }}
        .color-accent{{
            background-color: #c4005e;
            color: #FFFFFF;
            font-size: 20px;
        }}
        .color-sec{{
            background-color: #a6d8cc;
            font-size: 20px;
        }}
        .input-field{{
            margin-bottom: 10px;
            margin-top: 8px;
            background-color: #f2f2f2;
            color: #010b19;
            padding: .1em 2%;
            border: 1px solid #ccc;
            font-size: 15px;
            width: 30%;
            min-width: 55px;
            height: 1.5em;
        }}
        .rounded-corners{{
            border-radius: 5px;
        }}
        .thin-grey{{
            height: 1px;
            border: 0;
            width: 90%;
            border-top: 1px solid #b8b8b8;
            margin-top: 1em;
            margin-bottom: 2em;
            padding: 0;
        }}
        .field{{
            min-height: 2em;
            background-color: #ffffff;
            border: 1px solid #d4d4d4;
            padding: .2em 1.1em;
            clear: both;
            overflow: hidden;
        }}
        </style>
    </head>
        <body>
            <div class="background center">
                <div class="top-heading center">
                    <p> The Game of Nim </p>
                </div>
                <hr class="thin-grey center"/>
                <div id="choose-strategy" class="choose-strategy width-list center ">
                    {getSetUpXml(pId)}
                </div>


                <div id="game">

                </div>

            </div>
        </body>
    </html>
}


sig main: () ~> ()
fun main() {
    addRoute("/", main_page);
    servePages()
}

main()